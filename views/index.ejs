<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="icon" href="/images/favicon.ico">
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <script type="text/x-template" id="modal-template">
      <transition name="modal">
        <div class="modal-mask">
          <div class="modal-wrapper">
            <div class="modal-container">

              <div class="modal-header">
                <slot name="header" class="mx-auto">
                  default header
                </slot>
              </div>

              <div class="modal-body">
                <slot name="body">
                  default body
                </slot>
              </div>

              <div class="modal-footer">
                <slot name="footer">
                </slot>
              </div>
            </div>
          </div>
        </div>
      </transition>
    </script>

  </head>
  <body class="bg-gray-800 text-center"> 
    <h1 class="text-2xl font-bold text-white my-8 underline"><%= title %></h1>
  </body>
  <div id="app" class="w-full mt-8 mx-auto">
    <!-- todo list -->
    <div class="my-2">
      <div class="group border-gray-300 border-2 w-1/3 my-2 p-2 bg-indigo-600 bg-opacity-10 mx-auto" v-for="todo in todos" :key="todo.id">
        <div class="group-hover:border-pink-600">
          <div class="flex">
            
            <i class="material-icons my-auto pl-4 text-2xl text-green-400 cursor-pointer" class="stats" @click="updateStatus(todo, todo.id)" v-if="todo.completed == 1">
              check_circle
            </i>
            <i class="material-icons my-auto pl-4 text-2xl text-yellow-400 cursor-pointer" class="stats" @click="updateStatus(todo, todo.id)" v-else>
              check_circle
            </i>
            <h3 class="font-sans font-bold text-lg text-white p-4 text-left">
              {{ todo.title }}
            </h3>
          </div>
          <p class="font-sans font-normal text-base text-white p-4 mx-4 bg-indigo-900 rounded-md shadow-sm text-left">
            {{ todo.description }}
          </p>
          <div class="flex justify-end my-2 gap-2">         
            <button class="bg-green-500 hover:bg-green-700 w-10 h-auto text-white font-bold rounded-md" @click="showModal = true; editTodo(todo, todo.id)">
              <i class="material-icons py-2">edit</i>
            </button>            
            <button class="bg-red-500 hover:bg-red-700 w-10 h-auto text-white font-bold rounded-md" @click="deleteTodo(todo, todo.id)">
              <i class="material-icons py-2">delete</i>
            </button>
          </div> 
        </div>
      </div>
    </div>
    <button id="show-modal" class="border-dashed border-2 border-blue-500 hover:bg-blue-800 rounded-md p-2 text-white w-1/3 font-bold text-lg my-4 inline-flex justify-center gap-4" @click="addModal">
      <span class="material-icons my-auto">
        add_circle_outline
      </span>
      <span class="my-auto">
        Add New Task
      </span>
    </button>
    <!-- use the modal component, pass in the prop -->
    <modal v-if="showModal" @close="showModal = false">
      <!-- Show when in add new task mode -->
      <h3 slot="header" class="mx-auto font-bold text-2xl" v-if="!editModal">Add Task</h3>
      <!-- Show when in edit task mode -->
      <h3 slot="header" class="mx-auto font-bold text-2xl" v-else>Edit Task</h3>
      <!-- Input new todo -->
      <div slot="body" class="input">
        <div class="text-red-500" v-if="errors.length > 0">
          <b>Please correct the following error(s):</b>
          <ul>
            <li v-for="error in errors">{{ error }}</li>
          </ul>
        </div >
        <div v-else></div>
        <input class="py-2 px-4 my-2 rounded-md w-full border-2 border-gray-400 shadow-sm" type="text" v-model="title" placeholder="What are you working on?">
        <input class="py-2 px-4 my-2 rounded-md w-full border-2 border-gray-400 shadow-sm" type="text" v-model="description" placeholder="Add note">
      </div>
      <!-- modal footer -->
      <div slot="footer" class="flex flex-row-reverse gap-2">
        <!-- Show when in add new task mode -->
        <button class="bg-blue-500 hover:bg-blue-700 py-2 px-4 text-white font-bold w-20" v-if="!editModal" @click="addTodo">Save</button>
        <!-- Show when in edit task mode -->
        <button class="bg-blue-500 hover:bg-blue-700 py-2 px-4 text-white font-bold w-20" id="update" v-else @click="updateTodo(id)">Update</button>
        <button class="bg-white bg-opacity-20 border-2 hover:border-red-500 border-gray-200 py-2 px-4 text-gray-400 hover:text-red-500 font-bold w-20" @click="errors = []; showModal = false; editModal = false;">Cancel</button>
      </div>
    </modal>
  </div>
  <script>
    Vue.component('modal', {
      template: '#modal-template',
    });

    var app = new Vue({
      el: '#app',
      data: {
        todos: [],
        errors: [],
        showModal: false,
        editModal: false,
        title: null,
        description: null,
      },
      
      async mounted() {
        const response = await fetch('/todo');
        const todo = await response.json();
        this.todos = todo;
      },
      methods: {
        async addTodo() {
          this.errors = [];
          if (this.title == '' || this.description == '') {
            if (this.title == '') {
              this.errors.push('Title is required.');
            }
            if (this.description == '') {
              this.errors.push('Note is required.');
            }
            return false;
          }
          else {
            const response = await fetch('/todo', {
              method: 'POST',
              body: JSON.stringify({
                title: this.title,
                description: this.description
              }),
              headers: {
                'Content-Type': 'application/json'
              }
            });
            const todo = await response.json();
            this.todos.push(todo);
            this.showModal = false;
          }
        },
        async updateStatus(todo, id) {
          if (todo.completed == 1) {
            todo.completed = 0;
          }
          else {
            todo.completed = 1;
          }
          const response = await fetch('/todo/' + id, {
            method: 'PATCH',
            body: JSON.stringify({
              completed: todo.completed
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
        },
        async deleteTodo(todo, id) {
          const response = await fetch(`/todo/` + id, {
            method: 'DELETE'
          });
          const index = this.todos.indexOf(todo);
          this.todos.splice(index, 1);
          return response;
        },
        editTodo(todo, id) {
          this.errors = [];
          this.editModal = true;
          this.title = todo.title;
          this.description = todo.description;
          this.id = id;
        },
        async updateTodo(id) {
          if (this.title == '' || this.description == '') {
            if (this.title == '') {
              this.errors.push('Title is required.');
            }
            if (this.description == '') {
              this.errors.push('Note is required.');
            }
            return false;
          }
          const response = await fetch(`/todo/` + id, {
            method: 'PATCH',
            body: JSON.stringify({
              title: this.title,
              description: this.description,
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
          const todo = await response.json();
          this.showModal = false;
          this.editModal = false;
          this.updated();          
        },
        async updated() {
          const response = await fetch('/todo');
          const todo = await response.json();
          this.todos = todo;
        },
        addModal() {
          this.description = '';
          this.title = '';
          this.showModal = true;
          this.editModal = false;
        },
        resetInstances() {
          this.title = '';
          this.description = '';
          this.errors = [];
        },
      }
    });
  </script>
</html>