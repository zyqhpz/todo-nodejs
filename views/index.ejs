<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <script type="text/x-template" id="modal-template">
      <transition name="modal">
        <div class="modal-mask">
          <div class="modal-wrapper">
            <div class="modal-container">

              <div class="modal-header">
                <slot name="header" class="mx-auto">
                  default header
                </slot>
              </div>

              <div class="modal-body">
                <slot name="body">
                  default body
                </slot>
              </div>

              <div class="modal-footer">
                <slot name="footer">
                </slot>
              </div>
            </div>
          </div>
        </div>
      </transition>
    </script>

  </head>
  <body class="bg-gray-800 text-center"> 
    <h1 class="text-2xl font-bold text-white my-8 underline"><%= title %></h1>
  </body>
  <div id="app" class="w-full mt-8 mx-auto">
    <!-- Input new todo -->
    <!-- <div class="input">
      <input class="py-2 px-4 my-2 rounded-md w-1/3" type="text" v-model="title" placeholder="Add new todo">
      <br>
      <input class="py-2 px-4 my-2 rounded-md w-1/3" type="text" v-model="description" placeholder="Add a description">
      <br>
      <button class="bg-green-500 hover:bg-purple-700 py-2 px-4 text-white font-bold" @click="addTodo">Add</button> -->

      <!-- <p v-if="errors.length">
        <b>Please correct the following error(s):</b>
        <ul>
          <li v-for="error in errors">{{ error }}</li>
        </ul>
      </p> -->
    <!-- </div> -->
    <!-- todo list -->
    <div class="my-2">
      <div class="group border-gray-300 border-2 w-1/3 my-2 p-2 bg-indigo-600 bg-opacity-10 mx-auto" v-for="todo in todos" :key="todo.id">
        <div class="group-hover:border-pink-600">
          <div class="flex">
            <!-- <input type="checkbox" class="" v-model="todo.completed" @click="updateStatusTodo(todo, todo.id)"> -->

            
            <span class="material-icons my-auto pl-4 text-2xl text-green-400 cursor-pointer" class="stats" @click="updateStatus(todo, todo.id)" v-model="todo.completed" v-if="todo.completed == 1">
              check_circle
            </span>
            <span class="material-icons my-auto pl-4 text-2xl text-yellow-400 cursor-pointer" class="stats" @click="updateStatus(todo, todo.id)" v-model="todo.completed" v-else>
              check_circle
            </span>
            <h3 class="font-sans font-bold text-lg text-white p-4 text-left">
              {{ todo.title }}
            </h3>
          </div>
          <p class="font-sans font-normal text-base text-white p-4 mx-4 bg-indigo-900 rounded-md shadow-sm text-left">
            {{ todo.description }}
          </p>
          <div class="flex justify-end my-2 gap-2">         
            <button class="bg-green-500 hover:bg-green-700 w-10 h-auto text-white font-bold rounded-md" @click="showModal = true; editTodo(todo, todo.id)">
              <i class="material-icons py-2">edit</i>
            </button>            
            <button class="bg-red-500 hover:bg-red-700 w-10 h-auto text-white font-bold rounded-md" @click="deleteTodo(todo, todo.id)">
              <i class="material-icons py-2">delete</i>
            </button>
          </div> 
        </div>
      </div>
    </div>
    <button id="show-modal" class="border-dashed border-2 border-blue-500 hover:bg-blue-800 rounded-md p-2 text-white w-1/3 font-bold text-lg my-4 inline-flex justify-center gap-4" @click="showModal = true; editModal = false">
      <span class="material-icons my-auto">
        add_circle_outline
      </span>
      <span class="my-auto">
        Add New Task
      </span>
    </button>
    <!-- use the modal component, pass in the prop -->
    <modal v-if="showModal" @close="showModal = false">
      <!-- Show when in add new task mode -->
      <h3 slot="header" class="mx-auto font-bold text-2xl" v-if="!editModal">Add Task</h3>
      <!-- Show when in edit task mode -->
      <h3 slot="header" class="mx-auto font-bold text-2xl" v-else>Edit Task</h3>
      <!-- Input new todo -->
      <div slot="body" class="input">
        <input class="py-2 px-4 my-2 rounded-md w-full border-2 border-gray-400 shadow-sm" type="text" v-model="title" placeholder="What are you working on?">
        <input class="py-2 px-4 my-2 rounded-md w-full border-2 border-gray-400 shadow-sm" type="text" v-model="description" placeholder="Add note">
      </div>
      <!-- modal footer -->
      <div slot="footer" class="flex flex-row-reverse gap-2">
        <!-- Show when in add new task mode -->
        <button class="bg-blue-500 hover:bg-blue-700 py-2 px-4 text-white font-bold w-20" v-if="!editModal" @click="addTodo">Save</button>
        <!-- Show when in edit task mode -->
        <button class="bg-blue-500 hover:bg-blue-700 py-2 px-4 text-white font-bold w-20" id="update" v-else>Update</button>
        <button class="bg-white bg-opacity-20 border-2 hover:border-red-500 border-gray-200 py-2 px-4 text-gray-400 hover:text-red-500 font-bold w-20" @click="showModal = false">Cancel</button>
      </div>
    </modal>
  </div>
  <script>
    Vue.component('modal', {
      template: '#modal-template',
    });

    var app = new Vue({
      el: '#app',
      data: {
        todos: [],
        showModal: false,
        clicked: false,
        editModal: false,
      },
      async mounted() {
        const response = await fetch('/todo');
        const todo = await response.json();
        this.todos = todo;
      },
      methods: {
        async addTodo() {
          const response = await fetch('/todo', {
            method: 'POST',
            body: JSON.stringify({
              title: this.title,
              description: this.description
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
          const todo = await response.json();

          this.errors = [];

          if (!this.title && !this.description) {
            alert('Please fill all the fields');
            // this.errors.push('Please fill all the fields');
            //return;
            if (!this.title) {
              this.errors.push('Name required.');
            }
            if (!this.description) {
              this.errors.push('Age required.');
            }
          }
          else {
            this.todos.push(todo);
          }
        },
        async updateStatus(todo, id) {
          //this.clicked = !this.clicked;
          if (todo.completed == 1) {
            todo.completed = 0;
          }
          else {
            todo.completed = 1;
          }
          const response = await fetch('/todo/' + id, {
            method: 'PATCH',
            body: JSON.stringify({
              completed: todo.completed
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
        },
        async deleteTodo(todo, id) {
          const response = await fetch(`/todo/` + id, {
            method: 'DELETE'
          });
          const index = this.todos.indexOf(todo);
          this.todos.splice(index, 1);
          return response;
        },
        editTodo(todo, id) {
          this.editModal = true;
          this.title = todo.title;
          this.description = todo.description;
          this.completed = todo.completed;

          this.id = id;
          // get document by id of upd
          
          //let x = document.getElementsById('update').length;
          alert(id);
          this.addClass(id);
          // update method todo
          //this.updateTodo(todo.id);
        //this.updateTodo(todo.id);
        },
        addClass(id) {
          // create new attribute to button element
          document.getElementById('update').setAttribute('id', 'update' + id);
          alert(id);
          // document.getElementById('update').setAttribute('@click','updateTodo(' + id + ')');
          // var btn = document.getElementById("update");
          // var att = document.createAttribute("onclick");
          // // att.value = "updateTodo(id)";
          // att.value = "updateTodo(" + id + "); showModal = false; editModal = false";
          // btn.setAttribute(att);
        },
        async updateTodo(id) {
          // alert('update');
          const response = await fetch(`/todo/` + id, {
            method: 'PATCH',
            body: JSON.stringify({
              title: this.title,
              description: this.description,
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
          const todo = await response.json();
        //this.todos.splice(this.todos.indexOf(todo), 1, todo);
        },
      }
    });
  </script>
</html>

<!-- UPCOMING TASK 
  1. redesign edit, delete button - done
  2. create modal to edit task - done
  3. create update status todo button - done
  4. update todo details -> try jquery to pass the id by creating new attrbiute to button
-->